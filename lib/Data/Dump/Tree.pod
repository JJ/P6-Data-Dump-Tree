=begin pod

=head1 NAME
Date::Dump::Tree - Renders data structures in a tree fashion

=head1 SYNOPSIS
	use Data::Dump::Tree ;

	say dump @your_data, 'a_title', %options ;

	my $d = Data::Dump::Tree.new ;
	say $d.dump @your_data ;

	$dumper does role { .... } ;
	say $d.dump @your_data ;
	
=head1 DESCRIPTION

Data::Dump::Tree renders your data structures in a tree fashion. 

If you have Term::ANSIColor installed, the output will be so colored.

=head1 EXPORT

=item sub dump($structure_to_dump, $title?, %options?)

=item method dump(($structure_to_dump, $title?, %options?)

=head1 EXAMPlE

	use Data::Dump::Tree ;

	class MyClass { has Int $.size ; has Str $.name }

	my $s = [
		'text',
		Rat.new(31, 10),
		{
			a => 1,
			b => 'string',
		},
		MyClass.new(size => 6, name => 'P6 class'),
		'aaa' ~~ m:g/(a)/,
		] ;

	say dump $s, 'A complex structure', { color => 0 } ;

=head2 Output
	
	A complex structure [5] @0
	|- 0 = text.Str
	|- 1 = den: 10 num: 31.Rat
	|- 2 = {2} @1
	|  |- a => 1.Int
	|  `- b => string.Str
	|- 3 = .MyClass @2
	|  |- $.size = 6.Str
	|  `- $.name = P6 class.Str
	`- 4 = (3) @3
	   |- 0 = [0 .. 1].Match
	   |- 1 = [1 .. 2].Match
	   `- 2 = [2 .. 3].Match

=head1 DUMP 
Each line of output consists 5 elements, 2 elemets, the tree and the address,
are under the control of Data::Dump::Tree, The three remaining elements can
be under your control ut Data::Dump::Tree provides default rendering.	

Refer to section 'handling specific types' to learn how to add your own types
or render specific types with your how handlers.

=head2 Elements of the dump

	|- 0 = text.Str

	|- 3 = .MyClass @2

	`- 4 = (3) @3

=head3 tree (glyphs)
The tree portion of the output shows the relationship between the data elements.
The datata is indented under it container, ....

You can control the color of the tree portion as well as if it is rendered with
ASCII, ANSI code or Unicode.

=head3 key
The key is the name of the element being displayed, in the examples above, the
container is an array; Data:Dump::Tree gives the index of the element as the 
key of the elenet. IE: '0 =', '3 =', '4 ='

=head3 value
The value of the element being displayed, Data::Dump::Tree displays the value of
"terminaÃ¶" variables, eg: Str, Int, Rat. For containers, nothing is displayed.

=head3 Types
The type of the variable with a '.' prepended. IE: '.Str', '.MyClass'

Data::DumpTree will display

=item  Hashes as '{x}' where x is the number of element of the hash

=item  Arrays as '[x]' where x is the number of element of the Array

=item  Listss as '(x)' where x is the number of element of the list

=head3 address
the Data::Dump::Tree address is added to every container in the form of a '@'
and an index that is incremented for heach container. If a container is
multiple times in the output, it will be rendered once only then refered to 
by '@current_address -> @first_time_seen' 

=head2 Configuration and Overrides

=head3 ASCII vs ANSI vs Unicode tree drawing

As of this version, only ASCII is supported. ANSI makes the output nicer
to look at. The unicode outpt saves a character a every level.

=head3 colors

=head4 %options<color> 
By default colorin is on, if Term::ANSIColor is installed.

Setting this option to False forced the output to be monochrome. 

=head4 %options<colors> 
You can pass your own colors in a Hash in %options<colors>. The default are:

my %default_colors =
	<
	title yellow   glyph reset    perl_address yellow    ddt_address blue
	link  green    key   cyan     value        reset     header      magenta 
	> ;

where colors are ANSI colors. reset meant default color.

=head3 %options<width>
The default widt is  79. In the next version, Data::Dump::Tree will use your 
terminal width if you do not specify a width.

Note that the width you pass is reduced with the width of the glyps as we use
that space when displaying multiline values in the dump.

=head3 %options<max_depth>
Limit the depth of a dump to the option. by default there is no limit.

=head3 %options<display_address>
By default this option is set.

=head3 display_perl_address 
Display the internal address of the objects. Not ser by default.


=head3 handling specific types
This section will show you how to write specific handler in the classes that
you create and to create a custom rendering for a specific class, even if it 
is not under your control.

=head4 you own classes

When Data::Dump::Tree renders an object, it first checks if it has an internal
handler for that type; if not handler is found, the object is quesried and its
handler is used, if any; finally, Data::Dump::Tree uses a generic handler.

It is important to understand that you precisely control how your class is 
rendered, You can even return comlpletely different data than the one contained
in your class.

Data::Dump::Tree uses two methods, you can define either one or both.


=head5 ddt_get_header, code is defined in your class 


	method ddt_get_header 
	{
	# some comment, usually blank  # class type
	("something about this class", '.' ~ self.^name") 
	}


=head5 ddt_get_elements, code is defined in your class 

	method ddt_get_element
	{
 
	[ 
	#key    #value
	('1 =', 'has no name'), 
	('3 =>', 'abc'), 
	('attribute: ', ' ' ~ 1), 
	('sub object --> ', [1 .. 3]),
	('from sub', do_something()), 
	] 

	}

You can:

=item Remove/add elements

=item Change the keys

=item Replace some elements or the whole class

=item call method/subs that return elements, keys, or values

Data::Dump::Tree will iterate over the elements you pass it, call their
handlers, add their types, ...

If your keys or values are text string and they contain embedded "\n", 
Data::Dump::Tree will display them on multiple lines. See the Role section.

The module tests and Data::Dump::Tree::DescribeBaseobjects are a good place to
look at for more examples.

=head4 classes defined by someone else

You can not add methods to classes that you do not control. Data::Dump::Tree
has a list or handlers that it uses to display the elements of the structure
you pass to dump(). You can override those handler and add new handlers.

You use the role machanism to set the handlers. The role contains multi
methods

=item get_header 

=item get_elements

They work in the same fashion as the methods you add to your own classes. Here
is an example taken from Data::Dump::Tree code.

	role some_role_name
	{
	# ..................... Type you want to handle is Hash
	multi method get_header (Hash $h)
		 { ('', '{' ~ $h.elems ~ '}') }

	# . ..................... Type you want to handle is Hash
	multi method get_elements (Hash $h) 
		{ [ $h.sort(*.key)>>.kv.map: -> ($k, $v) {"$k => ", $v} ] }

	# more handlers for other types
	}

To make that handler active, make your dumper do the role

	my $d = Data::Dump::Tree.new ;
	$d does some_role_name ;

	say $d.dump(@your_data) ;

Adding Handler at the dumper creation time or when calling sub dump() is 
planned for future versions. 

=head4 FINAL elements
o far we have seen how to render containers but sometimes we want to handle a
type as if it was a Str or an Int, EG: not display its elements but instead
display it on a single line.

You can, in a handler, tell Data::Dump::Tree that a type rendering is FINAL.
 
The default role has a handler that is specific for the Rat class. Rather than
show a flaoting number, as say $rat would, or remder the Rat type with it's 
attributes, we display the Rat on a single line. Here is the handler:
 
	multi method get_header (Rat $r)
	{(
	# the rendition of the Rat
	'den: ' ~ $r.denominator ~ ' num: ' ~ $r.numerator,
	#its type
	'.' ~ $r.^name,
	# hint to Data::Dump::Tree that this is finall
	DDT_FINAL
	)}

=head2 Roles provided with Data::Dump::Tree

Data::Dump::Tree comes with a few extra roles that are not "played" by the
object returned by .new

Nore roles will be added in the future, Eg: RenderWithUnicode.

Please feel free to send me roles you think would be useful to other and that
you belive fit well in the same bundle.

You are welcome to make your own distribution too, I recomment using namespace
Data::Dump::Tree::Role::YouRole.

=item Data::Dump::Tree::Role::MatchDetails 
Give a bit more details about a Match

=item Data::Dump::Tree::Role::PerlString 
Renders string containing control codes (eg: \n, ANSI, ...) with backslashed
codes and hex values.

=item Data::Dump::Tree::Role::SilentSub
Sub objects are rendered in a very succint way

=head1 BUGS, LIMITATIONS, AND SUPPORT

Submit bugs (preferably as executable tests) and feel free to make 
suggestions.

This module will mature with time, and with your suggestions, it 
is intended to replace my P5 Data::TreeDumper module for P6.

=head1 AUTHOR

Nadim ibn hamouda el Khemir
https://github.com/nkh

=head1 LICENSE AND COPYRIGHT

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl6 itself.

=head1 SEE ALSO

Data::Dump

=end pod


DOC INIT {use Pod::To::Text ; pod2text($=pod) ; }



